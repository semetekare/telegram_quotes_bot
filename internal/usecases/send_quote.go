package usecases

import (
	"context"
	"fmt"

	"telegram_bot/internal/entities"
	"telegram_bot/internal/interfaces"
)

// SendQuoteService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç –≤ Telegram-–∫–∞–Ω–∞–ª.
type SendQuoteService struct {
	telegram interfaces.TelegramSender // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
}

// NewSendQuoteService —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SendQuoteService.
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å TelegramSender –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.
func NewSendQuoteService(telegram interfaces.TelegramSender) *SendQuoteService {
	return &SendQuoteService{telegram: telegram}
}

// SendQuote –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏—Ç–∞—Ç—É –≤ Telegram-–∫–∞–Ω–∞–ª.
// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—É –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë —á–µ—Ä–µ–∑ TelegramSender.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.
func (s *SendQuoteService) SendQuote(ctx context.Context, quote *entities.Quote) error {
	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É —Å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∞
	message := fmt.Sprintf("üìñ %s\n\n _%s_ ‚úçÔ∏è", quote.Text, quote.Author)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TelegramSender
	err := s.telegram.SendMessage(ctx, message)
	if err != nil {
		// –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %w", err)
	}

	// –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil
	return nil
}
